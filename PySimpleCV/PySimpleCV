#!/usr/bin/python3
import numpy as np 
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg 
from matplotlib.figure import Figure
import PySimpleGUI as sg
import matplotlib 
from matplotlib.lines import Line2D
import pandas as pd
from impedance import preprocessing
from impedance.models.circuits import Randles, CustomCircuit
# from impedance.visualization import plot_nyquist
matplotlib.use('TkAgg')
from PySimpleCV_main_func import battery_xls2df, get_CV_init, find_state_seq, get_battery_eff, cy_idx_state_range, CV_file2df, get_CV_peak, eis_fit, eis_read_file


import sys

if not sys.warnoptions:
    import warnings
    warnings.simplefilter("ignore")

def draw_figure(canvas, figure): 
    figure_canvas_agg = FigureCanvasTkAgg(figure, canvas) 
    figure_canvas_agg.draw() 
    figure_canvas_agg.get_tk_widget().pack(side='top', fill='both', expand=1) 
    return figure_canvas_agg

def About_PySimpleCV():
    [sg.popup('PySimpleCV written by Kavin Teenakul',
    'License: GPL v3',
    'https://github.com/kevinsmia1939/PySimpleCV',
    'Libraries used:',
    'NumPy - https://numpy.org/',
    'pandas - https://pandas.pydata.org/',
    'Matplotlib - https://matplotlib.org/',
    'PySimpleGUI - https://www.pysimplegui.org',
    'impedance.py - https://impedancepy.readthedocs.io/en/latest/',
    )]
    
sg.theme('DarkBlue')

# Generate layout for CV tab
cv_slider_size = (50,8)
cv_col1=[[sg.Canvas(key='-CANVAS_cv-')]]
cv_col2 = [
    [sg.Button("Open CV File")],
    [sg.Text('.csv file with voltage on 1st colume and current on 2nd column separated by comma')],
    [sg.Text('CV file:'), sg.Text('No CV file selected', key = 'CV_file_use')],
    [sg.Checkbox('Switch anodic and cathodic current', default=False, key='inv_jpa_jpc', disabled=True, enable_events=True)],
    [sg.Text('iR compensation'),sg.Input(default_text=('0'), key='ir_compen',size=(10,5),disabled=False, enable_events=True),sg.Text('Ω'),sg.Text('', key = 'ir_compen_warning')],
    [sg.Text('jpa='), sg.Text('', key = 'output_jpa'), sg.Text('jpc='), sg.Text('', key = 'output_jpc'), sg.Text('vpa='), sg.Text('', key = 'output_vpa'), sg.Text('vpc='), sg.Text('', key = 'output_vpc'), sg.Text('Reversibility (jpa/jpc)=',key = 'rev_ratio'), sg.Text('', key = 'output_rev'), sg.Text('E\u00bd='), sg.Text('', key = 'output_e1_2'), sg.Text('ΔE\u209a='), sg.Text('', key = 'output_delta_e')],
    [sg.Text('Trim CV plot start'), sg.Slider(range=(1, 1), size=cv_slider_size, orientation='h', key='sl_cut_val_s', enable_events=True, disabled=True)],
    [sg.Text('Trim CV plot end'), sg.Slider(range=(1, 1), size=cv_slider_size, orientation='h', key='sl_cut_val_e', enable_events=True, disabled=True)],
    [sg.Text('Start 1'),sg.Slider(range=(1, 1), size=cv_slider_size, orientation='h', key='sl_jpa_lns', enable_events=True, disabled=True)],
    [sg.Text('End 1'),sg.Slider(range=(1, 1), size=cv_slider_size, orientation='h', key='sl_jpa_lne', enable_events=True, disabled=True)],
    [sg.Text('Start 2'),sg.Slider(range=(1, 1), size=cv_slider_size, orientation='h', key='sl_jpc_lns', enable_events=True, disabled=True)],
    [sg.Text('End 2'),sg.Slider(range=(1, 1), size=cv_slider_size, orientation='h', key='sl_jpc_lne', enable_events=True, disabled=True)],
    
    [sg.Text('Peak search range'),sg.Slider(range=(1, 100), size=cv_slider_size, orientation='h', key='peak_range', enable_events=True, disabled=False)],
    [sg.Text('Top peak position'),sg.Slider(range=(1, 1), size=cv_slider_size, orientation='h', key='peak_pos', enable_events=True, disabled=False)],
    [sg.Text('Bottom peak position'),sg.Slider(range=(1, 1), size=cv_slider_size, orientation='h', key='trough_pos', enable_events=True, disabled=False)],
    
    # [sg.Text('Cycle start'), sg.Slider(range=(0, 0), size=(50, 8), orientation='h', key='cycle_start', enable_events=True, disabled=False)],
    # [sg.Text('Cycle end'), sg.Slider(range=(1, 1), size=(50, 8), orientation='h', key='cycle_end', enable_events=True, disabled=False)],
    
    [sg.Button('Clear plot', key='cv_clear'),sg.Button('Exit', key='exit'),sg.Button('Save plot', key='save_cv'),sg.Button('About PySimpleCV')]
]
cv_layout = [[sg.Column(cv_col1),sg.Column(cv_col2)]]

# Generate layout for battery cycling tab.
bat_col1=[[sg.Canvas(key='-CANVAS_bat-')]]
bat_col2 = [
    [sg.Button("Open Battery File"),sg.Text('.xls files'),
     sg.Checkbox('Voltage', default=True, key='cb_volt', disabled=True, enable_events=True), 
     sg.Checkbox('Current', default=True, key='cb_current', disabled=True, enable_events=True),
     sg.Checkbox('Efficiencies', default=True, key='cb_eff', disabled=True, enable_events=True)],
    [sg.Text('Battery file:'), sg.Text('No Battery file selected', key = 'bat_file_use')],
    [sg.Text('Average voltage efficiency='),sg.Text('', key = 'output_ve'),sg.Text('%')],
    [sg.Text('Average current efficiency='), sg.Text('', key = 'output_ce'),sg.Text('%')],
    [sg.Text('Average energy efficiency='), sg.Text('', key = 'output_ee'),sg.Text('%')],
    [sg.Text('Total number of cycles='), sg.Text('', key= 'tot_cycle')],
    [sg.Text('Voltage, current, energy efficiency(%) for each row of cycle, press ctrl+c to copy')],
    [sg.Text('To copy nicely to spreadsheet software, select space as delimiter and merge delimters.')],
    [sg.Multiline('',size=(50,5), disabled=True, key = 'output_arr')],
    [sg.Text('Cycle start'), sg.Slider(range=(0, 0), size=(50, 8), orientation='h', key='cycle_start', enable_events=True, disabled=False)],
    [sg.Text('Cycle end'), sg.Slider(range=(1, 1), size=(50, 8), orientation='h', key='cycle_end', enable_events=True, disabled=False)],
    [sg.Button('Clear plot',key='bat_clear'),sg.Button('Save plot', key='save_bat'), sg.Button('Exit', key='exit_2')]
    ]          
bat_layout = [[sg.Column(bat_col1),sg.Column(bat_col2)]]

eis_col1=[[sg.Canvas(key='-CANVAS_eis-')],
      [sg.Text('EIS file:'), sg.Text('No EIS file selected', key = 'eis_file_use')],
      [sg.Text('Initial Guesses'),sg.Input(default_text='.01, .01, .001, 1, .1, 1', key='initial_guess',size=(72,5))]
      ]
eis_col2=[[sg.Button("Open EIS File", key = 'open_eis_file'), sg.Button("Plot", key='plot_eis')],
      [sg.Text('File type:'),sg.Combo(values=('CSV (.csv)', 'Gamry (.dta)','zplot (.z)','Versastudio (.par)','biologic (.mpt)', 'Autolab (.txt)', 'Parstat (.txt)', 'PowerSuite (.txt)', 'CHInstruments (.txt)'), default_value='CSV (.csv)', readonly=True, key='eis_file_type_select', enable_events=True, change_submits=True)],
      [sg.Checkbox('Ignore negative imaginary impedance', default=True, enable_events=True, k='ign_neg_img')],
      [sg.Radio('Randles circuit', "rad_eis_circuit", default=True, enable_events=True, k='randles_select_circuit'),sg.Checkbox('with CPE', default=True, enable_events=True, k='randles_cpe')],
      [sg.Radio('Custom circuit', "rad_eis_circuit", default=False, enable_events=True, k='custom_select_circuit')],
      [sg.Text('Custom circuit scheme')],
      [sg.Input(default_text=('R0-p(R1-Wo1,CPE1)'), key='custom_circuit',size=(50,5),disabled=True)],
      [sg.Multiline('',size=(50,20), disabled=True, key = 'circuit_output')],
      [sg.Button('Clear plot', key='eis_clear'),sg.Button('Exit', key='exit'),sg.Button('Save plot', key='save_eis')],
      [sg.Text('Visit https://impedancepy.readthedocs.io/en/latest/ for help')],
      ]
eis_layout = [[sg.Column(eis_col1),sg.Column(eis_col2)]]

layout =[[sg.TabGroup([[  sg.Tab('Cyclic Voltammetry', cv_layout),
                          sg.Tab('Battery Cycling', bat_layout),
                          sg.Tab('EIS', eis_layout)
                           ]], key='-TAB GROUP-', expand_x=True, expand_y=True),
]]
          
window = sg.Window('PySimpleCV', layout, finalize=True, element_justification='center')
# window.maximize()
canvas_cv = window['-CANVAS_cv-'].tk_canvas
canvas_bat = window['-CANVAS_bat-'].tk_canvas
canvas_eis = window['-CANVAS_eis-'].tk_canvas

# Generate initial empty plot.
fig_cv = Figure(figsize=(10,10))
ax_cv = fig_cv.add_subplot(111)
ax_cv.set_xlabel("Voltage")
ax_cv.set_ylabel("Current")
ax_cv.grid()
# tight layout push away y label
# fig_cv.tight_layout(pad=2)
fig_agg_cv = draw_figure(canvas_cv, fig_cv)

fig_bat = Figure(figsize=(10,10))
ax_bat_volt = fig_bat.add_subplot(111)
ax_bat_current = ax_bat_volt.twinx()
ax_bat_eff = ax_bat_volt.twinx()
ax_bat_cycle = ax_bat_volt.twiny()
ax_bat_eff.spines.right.set_position(("axes", 1.1))
ax_bat_volt.set_ylabel("Voltage")
ax_bat_current.set_ylabel("Current")
ax_bat_eff.set_ylabel("Voltage/Current/Energy Efficiencies")
ax_bat_cycle.set_xlabel("Cycle")
ax_bat_volt.set_xlabel("Time")
# Create manual legend so we can put them in the same box
volt_leg = Line2D([0], [0], label='Voltage', color='blue', linestyle='-')
current_leg = Line2D([0], [0], label='Current', color='red', linestyle='--')
VE_leg = Line2D([0], [0], label='VE', color='blue', marker='*', linestyle='None')
CE_leg = Line2D([0], [0], label='CE', color='red', marker='.', linestyle='None')
EE_leg = Line2D([0], [0], label='EE', color='green', marker='^', linestyle='None')
ax_bat_volt.legend(handles=[volt_leg,current_leg,VE_leg,CE_leg,EE_leg],ncol=5, bbox_to_anchor=(0.5,-0.25),loc='lower center')
ax_bat_volt.grid()
fig_bat.tight_layout()
fig_agg_bat = draw_figure(canvas_bat, fig_bat)

# Generate initial empty plot.
fig_eis = Figure(figsize=(10,10))
ax_eis = fig_eis.add_subplot(111)
ax_eis.set_xlabel("Z'(w)[Ohms]")
ax_eis.set_ylabel('-Z"(w)[Ohms]')
ax_eis.set_aspect('equal', 'box')
ax_eis.axis('equal')
ax_eis.grid()
fig_agg_eis = draw_figure(canvas_eis, fig_eis)


cycle_start = 1
cycle_end = 1

def clear_battery_plot():
    # function to clear the plot.
    # Reset scrolls and checkboxes
    window['cb_volt'].Update(False)
    window['cb_current'].Update(False)
    window['cb_eff'].Update(False)
    window['cb_volt'].Update(disabled=True)
    window['cb_current'].Update(disabled=True)
    window['cb_eff'].Update(disabled=True)
    window['cycle_start'].Update(range=(0,0))
    window['cycle_end'].Update(range=(1,1))
    window['cycle_start'].Update(disabled=True)
    window['cycle_end'].Update(disabled=True)    
    # Remove existing plot.
    ax_bat_current.cla()
    ax_bat_volt.cla()
    ax_bat_eff.cla()
    ax_bat_cycle.cla()
    
    #Redraw Efficiency axis and labels.
    ax_bat_eff.spines.right.set_position(("axes", 1.1))
    ax_bat_volt.set_ylabel("Voltage")
    ax_bat_current.set_ylabel("Current")
    ax_bat_eff.set_ylabel("Voltage/Current/Energy Efficiencies")
    ax_bat_cycle.set_xlabel("Cycle")
    ax_bat_volt.set_xlabel("Time")
    # Create manual legend so we can put them in the same box
    volt_leg = Line2D([0], [0], label='Voltage', color='blue', linestyle='-')
    current_leg = Line2D([0], [0], label='Current', color='red', linestyle='--')
    VE_leg = Line2D([0], [0], label='VE', color='blue', marker='*', linestyle='None')
    CE_leg = Line2D([0], [0], label='CE', color='red', marker='.', linestyle='None')
    EE_leg = Line2D([0], [0], label='EE', color='green', marker='^', linestyle='None')
    ax_bat_volt.legend(handles=[volt_leg,current_leg,VE_leg,CE_leg,EE_leg],ncol=5, bbox_to_anchor=(0.5,-0.25),loc='lower center')
    ax_bat_volt.grid()
    fig_agg_bat.draw()
    
def clear_cv_plot():
    # function to clear the plot.
    # Reset scrolls and checkboxes
    window['sl_cut_val_s'].Update(disabled=True)
    window['sl_cut_val_e'].Update(disabled=True)
    window['sl_jpa_lns'].Update(disabled=True)
    window['sl_jpa_lne'].Update(disabled=True)
    window['sl_jpc_lns'].Update(disabled=True)
    window['sl_jpc_lne'].Update(disabled=True)
    window['peak_range'].Update(disabled=True)
    window['peak_pos'].Update(disabled=True)
    window['trough_pos'].Update(disabled=True)
    window['sl_cut_val_s'].Update(range=(1, 1))
    window['sl_cut_val_e'].Update(range=(1, 1))
    window['sl_jpa_lns'].Update(range=(1, 1))
    window['sl_jpa_lne'].Update(range=(1, 1))
    window['sl_jpc_lns'].Update(range=(1, 1))
    window['sl_jpc_lne'].Update(range=(1, 1))
    window['peak_range'].Update(range=(1, 100))
    window['peak_pos'].Update(range=(1, 1))
    window['trough_pos'].Update(range=(1, 1))
    ax_cv.cla()
    ax_cv.grid()
    ax_cv.set_xlabel("Voltage")
    ax_cv.set_ylabel("Current")
    fig_agg_cv.draw()
    
def clear_eis_plot():
    ax_eis.cla()
    ax_eis.set_xlabel("Z'(w)[Ohms]")
    ax_eis.set_ylabel('-Z"(w)[Ohms]')
    ax_eis.set_aspect('equal', 'box')
    ax_eis.axis('equal')
    ax_eis.grid()
    fig_agg_eis.draw()

randles_select = True

while True:
    event, values = window.read()
    match event:
        case sg.WIN_CLOSED | 'exit' | 'exit_2':
            break
        case "About PySimpleCV":
            About_PySimpleCV()
        case 'cv_clear':
            clear_cv_plot()
        case "Open CV File":
            CV_file_new = sg.popup_get_file('Choose CV file')
            # If cancel, close the window, go back to beginning
            if CV_file_new is None:
                continue
            elif CV_file_new == '':
                continue
            try:
                # Clear plot every time new plot open
                clear_cv_plot()
                CV_file = CV_file_new
                df_CV = CV_file2df(CV_file)
                ir_compen = 0 #initially is 0
                cv_size, volt, current = get_CV_init(df_CV,ir_compen) # Only need the cv_size so set to [0]
                window['sl_cut_val_s'].Update(range=(0,cv_size))
                window['sl_cut_val_e'].Update(range=(0,cv_size))
                window['sl_cut_val_e'].Update(cv_size)
                window['sl_jpa_lns'].Update(range=(0,cv_size))
                window['sl_jpa_lne'].Update(range=(0,cv_size))
                window['sl_jpc_lns'].Update(range=(0,cv_size))
                window['sl_jpc_lne'].Update(range=(0,cv_size))
                window['peak_range'].Update(range=(1, 100))
                window['peak_pos'].Update(range=(1, cv_size))
                window['trough_pos'].Update(range=(1, cv_size))
                window['sl_cut_val_s'].Update(disabled=False)
                window['sl_cut_val_e'].Update(disabled=False)
                window['sl_jpa_lns'].Update(disabled=False)
                window['sl_jpa_lne'].Update(disabled=False)
                window['sl_jpc_lns'].Update(disabled=False)
                window['sl_jpc_lne'].Update(disabled=False)
                window['peak_range'].Update(disabled=False)
                window['peak_pos'].Update(disabled=False)
                window['trough_pos'].Update(disabled=False)
                window['inv_jpa_jpc'].Update(disabled=False)
                window['CV_file_use'].Update(CV_file)
                ax_cv.grid()
                ax_cv.plot(volt, current, '-', color='black')
                ax_cv.grid()
                fig_agg_cv.draw()
            except Exception as file_error:
                sg.popup(file_error, keep_on_top=True)
        # case "ir_compen":
        #     if isinstance(values['ir_compen'], int):
        #         ir_compen = values['ir_compen']
        #     else:
        #         ir_compen = int(0)
        #     cv_size, volt, current = get_CV_init(df_CV,ir_compen)    
        #     ax_cv.grid()
        #     ax_cv.plot(volt, current, '-', color='black')
        #     ax_cv.grid()
        #     fig_agg_cv.draw()
        case 'sl_cut_val_s' | 'sl_cut_val_e' | 'sl_jpa_lns' | 'sl_jpa_lne' | 'sl_jpc_lns' | 'sl_jpc_lne' | 'peak_pos'| 'trough_pos'| 'peak_range' | 'inv_jpa_jpc' | 'ir_compen' :
            ax_cv.cla()
            ax_cv.grid()
            ax_cv.set_xlabel("Voltage")
            ax_cv.set_ylabel("Current")
            
            cut_val_s = int(values['sl_cut_val_s'])
            cut_val_e = int(values['sl_cut_val_e'])
            jpa_lns = int(values['sl_jpa_lns'])
            jpa_lne = int(values['sl_jpa_lne'])
            jpc_lns = int(values['sl_jpc_lns'])
            jpc_lne = int(values['sl_jpc_lne'])

            #Find custom peak
            window['peak_pos'].Update(range=(0,cv_size))
            window['trough_pos'].Update(range=(0,cv_size))
            peak_pos = int(values['peak_pos'])
            trough_pos = int(values['trough_pos'])
            peak_range = int(values['peak_range'])

            #set default at 0
            ir_compen = 0
            try:
                ir_compen = float(values['ir_compen'])
            except ValueError:
                ir_compen = float(0)
                # window['ir_compen_warning'].Update('Must be a number, use . for decimal')

            low_range_peak, high_range_peak, peak_volt, peak_curr, low_range_trough, high_range_trough, trough_volt, trough_curr, jpa_lns, jpa_lne,jpc_lns,jpc_lne, volt, current, jpa_base, jpc_base = get_CV_peak(df_CV,cut_val_s,cut_val_e, peak_range, peak_pos, trough_pos, jpa_lns, jpa_lne, jpc_lns, jpc_lne, ir_compen)

            ax_cv.plot((volt[low_range_peak],volt[high_range_peak]),(current[low_range_peak],current[high_range_peak]),"|", markersize = 10)
            # ax_cv.plot(peak_volt,peak_curr,"x", markersize = 10)
            
            ax_cv.plot((volt[low_range_trough],volt[high_range_trough]),(current[low_range_trough],current[high_range_trough]),"|", markersize = 10)
            # ax_cv.plot(trough_volt,trough_curr,"x", markersize = 10)
            
            # Calculate volatges of the peaks
            vpa = peak_volt
            vpc = trough_volt
            
            # Find estimate stadard electrode potential (E1/2~E0)
            E1_2 = (trough_volt+peak_volt)/2
            ax_cv.plot(E1_2,0,"D", markersize = 6)
            
            # Find peak-peak separation voltage
            delta_e = np.abs(trough_volt-peak_volt)
            
            
            # jpa_lns,jpa_lne,jpc_lns,jpc_lne, _, _, jpa_base, jpc_base = get_CV(df_CV,jpa_lns,jpa_lne,jpc_lns,jpc_lne,peak_volt,trough_volt)
            
            jpa = peak_curr - jpa_base
            jpc = jpc_base - trough_curr
            
            # invert jpa and jpc or not
            if values['inv_jpa_jpc'] == False:   
                jpa_show = jpa
                jpc_show = jpc
                jpa_text = 'jpa'
                jpc_text = 'jpc'
                # window['rev_ratio'].Update('Reversibility (jpa/jpc)=')
            else:
                jpa_show = jpc
                jpc_show = jpa    
                jpa_text = 'jpc'
                jpc_text = 'jpa'
                # window['rev_ratio'].Update('Reversibility (jpc/jpa)=')
                
            # Start plotting
            ax_cv.plot(volt, current, '-', color='black')
            
            # ax_cv.plot(peak_volt,jpa_base,marker='s')
            ax_cv.plot(volt[jpa_lns:jpa_lne],current[jpa_lns:jpa_lne],linewidth=4,linestyle='-',color='red')
            ax_cv.annotate(text='',ha="center",va="center", xy=(peak_volt,jpa_base), xytext=(peak_volt,peak_curr), arrowprops=dict(arrowstyle='<-'))
            ax_cv.plot((volt[jpa_lns],peak_volt),(current[jpa_lns],jpa_base),'--')
            

            ax_cv.plot(volt[jpc_lns:jpc_lne],current[jpc_lns:jpc_lne],linewidth=4,linestyle='-',color='blue')
            # ax_cv.plot(trough_volt,jpc_base,marker='s')
            ax_cv.annotate(text='', ha="center",va="center", xy=(trough_volt,jpc_base), xytext=(trough_volt,trough_curr), arrowprops=dict(arrowstyle='<-'))
            ax_cv.plot((volt[jpc_lns],trough_volt),(current[jpc_lns],jpc_base),'--')

            fig_agg_cv.draw()
         
            window['output_jpa'].Update(np.round(jpa_show,3))
            window['output_jpc'].Update(np.round(jpc_show,3))
            window['output_vpa'].Update(np.round(vpa,3))
            window['output_vpc'].Update(np.round(vpc,3))
            window['output_rev'].Update(np.round((jpa_show/jpc_show),3))
            window['output_e1_2'].Update(np.round(E1_2,3))
            window['output_delta_e'].Update(np.round(delta_e,3))
        # case "inv_jpa_jpc":
        #     if values['inv_jpa_jpc'] == True:
        #         jpa,jpc == jpc,jpa
        #     else:
        case "save_cv":
            save_cv_loc = sg.popup_get_file('Create of choose a file (PNG) to save to', save_as=True)
            if save_cv_loc is None:
                continue
            elif save_cv_loc == '':
                continue
            fig_cv.savefig(save_cv_loc)
        case "Open Battery File":
            bat_file_new = sg.popup_get_file('Choose battery cycle file (.xls)')
            # If cancel, close the window, go back to beginning
            # If empty, use old file
            if bat_file_new is None:
                continue
            elif bat_file_new == '':
                continue
            try:
                clear_battery_plot()
                bat_file = bat_file_new
                df_bat, row_size, time_df, volt_df, current_df, capacity_df, state_df = battery_xls2df(bat_file)
                # Sequence information
                charge_seq, discharge_seq, rest_seq = find_state_seq(state_df)
                tot_cycle_number = np.shape(charge_seq)[0]
                VE_arr, CE_arr, EE_arr = get_battery_eff(row_size, time_df, volt_df, current_df, capacity_df, state_df, 1, tot_cycle_number, charge_seq, discharge_seq)
                
                VE_avg = np.average(VE_arr[0:cycle_end])
                CE_avg = np.average(CE_arr[0:cycle_end])
                EE_avg = np.average(EE_arr[0:cycle_end])
                
                #For display table
                df_display=pd.DataFrame([VE_arr,CE_arr,EE_arr]) # Create dataframe to display in multiline output
                df_display=df_display.T
                df_display.columns = ['Volt', 'Current', 'Energy']
                df_display.index = df_display.index + 1 # Start index at 1 for nice looking

                window['cycle_end'].Update(disabled=False)
                window['cycle_start'].Update(disabled=False)
                window['cb_volt'].Update(disabled=False)
                window['cb_current'].Update(disabled=False)
                window['cb_eff'].Update(disabled=False)
                window['cb_volt'].Update(True)
                window['cb_current'].Update(True)
                window['cb_eff'].Update(True)
                window['cycle_start'].Update(range=(0,tot_cycle_number-1))
                window['cycle_end'].Update(range=(1,tot_cycle_number))
                window['bat_file_use'].Update(bat_file)
                window['output_arr'].Update(df_display.to_string()) # Make sure to print all lines
                window['tot_cycle'].Update(tot_cycle_number)
                window['output_ve'].Update(np.round(VE_avg,3))
                window['output_ce'].Update(np.round(CE_avg,3))
                window['output_ee'].Update(np.round(EE_avg,3))
                
                volt_line, = ax_bat_volt.plot(time_df, volt_df, '-', label='Voltage', color='blue')
                current_line, = ax_bat_current.plot(time_df, current_df, '--', label='Current', color='red')
                
                # Match cycle scale to time scale and plot efficiency.
                cycle_plot = np.linspace(1,tot_cycle_number, num=tot_cycle_number)
                cycle_idx = (charge_seq)[:,1]
                time_cycle = time_df[cycle_idx]
                VE_marker, = ax_bat_eff.plot(time_df[cycle_idx], VE_arr, '*',color='blue',label='VE', markersize=8)
                CE_marker, = ax_bat_eff.plot(time_df[cycle_idx], CE_arr, '.',color='red',label='CE', markersize=8)
                EE_marker, = ax_bat_eff.plot(time_df[cycle_idx], EE_arr, '^',color='green',label='EE', markersize=4)
                
                ax_bat_volt.autoscale()
                ax_bat_current.autoscale()
                ax_bat_eff.autoscale()
                # Set limit and ticks of bat_cycle
                ax_bat_cycle.set_xticks(cycle_plot)
                ax_bat_cycle.set_xlim(left=0,right=tot_cycle_number)
                
                # Set limit for efficiencies
                ax_bat_eff.set_ylim(0,100)
                
                ax_bat_volt.set_xlim(left=0,right=max(time_df))

                ax_bat_volt.grid()

                fig_agg_bat.draw()
            except Exception as file_error:
                sg.popup(file_error, keep_on_top=True)
        case 'cb_eff':
            if values['cb_eff'] == False:
                VE_marker.remove()
                CE_marker.remove()
                EE_marker.remove()
            else:
                VE_marker, = ax_bat_eff.plot(time_df[cycle_idx], VE_arr, '*',color='blue',label='VE', markersize=8)
                CE_marker, = ax_bat_eff.plot(time_df[cycle_idx], CE_arr, '.',color='red',label='CE', markersize=8)
                EE_marker, = ax_bat_eff.plot(time_df[cycle_idx], EE_arr, '^',color='green',label='EE', markersize=4)
            fig_agg_bat.draw()
        case 'cb_volt':
            if values['cb_volt'] == False:
                volt_line.remove()
            else:
                volt_line, = ax_bat_volt.plot(time_df, volt_df, '-', label='Voltage', color='blue')
            fig_agg_bat.draw()
        case 'cb_current':
            if values['cb_current'] == False:
                current_line.remove()
            else:
                current_line, = ax_bat_current.plot(time_df, current_df, '--', label='Current', color='red')
            fig_agg_bat.draw()
        case 'cycle_start' | 'cycle_end':
            cycle_start = int(values['cycle_start'])
            
            if cycle_start > cycle_end - 1:
                cycle_end = cycle_start + 1
                window['cycle_end'].Update(cycle_end)
                
            cycle_end = int(values['cycle_end'])
            if cycle_end < cycle_start + 1:
                cycle_start = cycle_end - 1
                window['cycle_start'].Update(cycle_start)
                
            # Do not replot, since we only change xlim.
            cycle_idx_range = cy_idx_state_range(state_df, cycle_start, cycle_end, charge_seq, discharge_seq)
            left_bound = time_df[cycle_idx_range][0]
            right_bound = time_df[cycle_idx_range][1]
            ax_bat_volt.set_xlim(left=left_bound,right=right_bound)
            ax_bat_cycle.set_xlim(left=cycle_start,right=cycle_end)
            ax_bat_volt.grid()
            
            VE_avg = np.average(VE_arr[cycle_start:cycle_end])
            CE_avg = np.average(CE_arr[cycle_start:cycle_end])
            EE_avg = np.average(EE_arr[cycle_start:cycle_end])
            window['output_ve'].Update(np.round(VE_avg,3))
            window['output_ce'].Update(np.round(CE_avg,3))
            window['output_ee'].Update(np.round(EE_avg,3))
            fig_agg_bat.draw()
        case "bat_clear":
            clear_battery_plot()
        case "save_bat":
            save_bat_loc = sg.popup_get_file('Create of choose a file (PNG) to save to', save_as=True)
            if save_bat_loc is None:
                continue
            elif save_bat_loc == '':
                continue
            fig_cv.savefig(save_bat_loc)            
        case "open_eis_file":
            eis_file_new = sg.popup_get_file('Choose EIS file')
            if eis_file_new is None:
                continue
            elif eis_file_new == '':
                continue
            eis_file = eis_file_new
            window['eis_file_use'].Update(eis_file)
        case "plot_eis": # case "plot_eis" | "eis_file_type_select" | "ign_neg_img" | "randles_cpe":
            print('CPE',values['randles_cpe'])
            eis_choose_file_type = values['eis_file_type_select']
            try:
                frequencies, z = eis_read_file(eis_file,eis_choose_file_type)
            except Exception as file_error:
                sg.popup(file_error, keep_on_top=True)
                sg.popup("Probably wrong file type chosen, choose a new file type.")
                continue
            try:    
                if values['ign_neg_img'] == True:
                    frequencies, z = preprocessing.ignoreBelowX(frequencies, z)
                    print("preprocessing")
                    
                initial_guess = [float(i) for i in values['initial_guess'].split(',')]    
                # if randles selected
                if values['randles_select_circuit'] == True:
                    try:
                        circuit = Randles(initial_guess=initial_guess, CPE=values['randles_cpe'])
                    except:
                        sg.popup("Need initial guess or number of guesses do not match the circuit (could be CPE?)", keep_on_top=True)
                        continue
                
                # custom circuit enabled
                if values['custom_select_circuit'] == True:
                    circuit_scheme = values['custom_circuit']
                    print(circuit_scheme)
                    circuit = CustomCircuit(initial_guess=initial_guess, circuit=circuit_scheme)
                    
                circuit.fit(frequencies, z)
                z_fit = circuit.predict(frequencies)
            except Exception as file_error:
                sg.popup(file_error, keep_on_top=True)  
                
            ax_eis.plot(np.real(z_fit), -np.imag(z_fit),'--')
            ax_eis.plot(np.real(z), -np.imag(z),':')

            ax_eis.set_aspect('equal', 'box')
            ax_eis.axis('equal')
            fig_agg_eis.draw()
            window['circuit_output'].Update(circuit)
        case "randles_select_circuit":
            window['randles_cpe'].Update(disabled=False)
            window['custom_circuit'].Update(disabled=True)
        case "custom_select_circuit":
            window['randles_cpe'].Update(disabled=True)
            window['custom_circuit'].Update(disabled=False)
        case "eis_clear":
            clear_eis_plot()
window.close()
