#!/usr/bin/python3
import numpy as np 
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg 
from matplotlib.figure import Figure
import PySimpleGUI as sg
import matplotlib 
import pandas as pd

matplotlib.use('TkAgg')
from PySimpleCV_main_func import get_CV, battery_xls2df, get_CV_init, find_state_seq, get_battery_eff, cy_idx_state_range, CV_file2df

def draw_figure(canvas, figure): 
    figure_canvas_agg = FigureCanvasTkAgg(figure, canvas) 
    figure_canvas_agg.draw() 
    figure_canvas_agg.get_tk_widget().pack(side='top', fill='both', expand=1) 
    return figure_canvas_agg

def About_PySimpleCV():
    [sg.popup('PySimpleCV written by Kavin Teenakul',
    'License: GPL v3',
    'https://github.com/kevinsmia1939/PySimpleCV',
    'Libraries used: Numpy, Pandas, Matplotlib, PySimpleGUI')]
    
sg.theme('DarkBlue')

cv_layout = [
    [sg.Canvas(key='-CANVAS_cv-')],
    [sg.Button("Open CV File"),sg.Text('.csv file with voltage on 1st colume and current on 2nd column separated by comma')],
    [sg.Text('CV file:'), sg.Text('No CV file selected', key = 'CV_file_use')],
    [sg.Text('jpa='), sg.Text('', key = 'output_jpa'), sg.Text('jpc='), sg.Text('', key = 'output_jpc'), sg.Text('Reversibility (jpa/jpc)='), sg.Text('', key = 'output_rev')],
    [sg.Text('Trim CV data'), sg.Slider(range=(1, 1), size=(60, 10), orientation='h', key='sl_cut_val', enable_events=True, disabled=True)],
    [sg.Text('Start 1'),sg.Slider(range=(1, 1), size=(60, 10), orientation='h', key='sl_jpa_lns', enable_events=True, disabled=True)],
    [sg.Text('End 1'),sg.Slider(range=(1, 1), size=(60, 10), orientation='h', key='sl_jpa_lne', enable_events=True, disabled=True)],
    [sg.Text('Start 2'),sg.Slider(range=(1, 1), size=(60, 10), orientation='h', key='sl_jpc_lns', enable_events=True, disabled=True)],
    [sg.Text('End 2'),sg.Slider(range=(1, 1), size=(60, 10), orientation='h', key='sl_jpc_lne', enable_events=True, disabled=True)],
    [sg.Button('Clear plot', key='cv_clear'),sg.Button('Exit', key='exit'),sg.Button('About PySimpleCV')]
]

bat_layout = [
    [sg.Canvas(key='-CANVAS_bat-')],
    [sg.Button("Open Battery File"),sg.Text('.xls files'),sg.Checkbox('Voltage', default=True, k='cb_volt', enable_events=True),
     sg.Checkbox('Current', default=True, k='cb_current', enable_events=True),sg.Checkbox('Efficiency', default=True, k='cb_eff', enable_events=True)],
    [sg.Text('Battery file:'), sg.Text('No Battery file selected', key = 'bat_file_use')],
    [sg.Text('Average voltage efficiency='), sg.Text('', key = 'output_ve'),sg.Text('%'), sg.Text('Total number of cycles='),sg.Text('', key= 'tot_cycle')],
    [sg.Text('Average current efficiency='), sg.Text('', key = 'output_ce'),sg.Text('%'), sg.Text('Average energy efficiency='), sg.Text('', key = 'output_ee'),sg.Text('%')],
    [sg.Text('Voltage, current, energy efficiency for each row of cycle(%), press ctrl+c to copy')],
    [sg.Text('To copy to spreadsheet, select space as delimiter and merge delimters.')],
    [sg.Multiline('',size=(50,5), disabled=True, key = 'output_arr')],
    [sg.Text('Cycle start'), sg.Slider(range=(0, 1), size=(60, 10), orientation='h', key='cycle_start', enable_events=True, disabled=False)],
    [sg.Text('Cycle end'), sg.Slider(range=(1, 1), size=(60, 10), orientation='h', key='cycle_end', enable_events=True, disabled=False)],
    [sg.Button('Clear plot',key='bat_clear'),sg.Button('Exit', key='exit_2')]
    ]

layout =[[sg.TabGroup([[  sg.Tab('Cyclic Voltammetry', cv_layout),
                           sg.Tab('Battery Cycling', bat_layout)
                           ]], key='-TAB GROUP-', expand_x=True, expand_y=True),
]]
          
window = sg.Window('PySimpleCV', layout, finalize=True, element_justification='center')
# window.maximize()


canvas_cv = window['-CANVAS_cv-'].tk_canvas
canvas_bat = window['-CANVAS_bat-'].tk_canvas

fig_cv = Figure(figsize=(10,5))
fig_bat = Figure(figsize=(10,5))
ax_cv = fig_cv.add_subplot(111)
ax_bat_volt = fig_bat.add_subplot(111)
ax_cv.set_xlabel("Voltage")
ax_cv.set_ylabel("Current")
ax_cv.grid()

ax_bat_current = ax_bat_volt.twinx()
ax_bat_eff_volt = ax_bat_volt.twinx()
ax_bat_cycle = ax_bat_volt.twiny()

ax_bat_eff_volt.spines.right.set_position(("axes", 1.1))
# ax_bat_eff_volt.spines.right.set_position(("axes", 1.1))

ax_bat_volt.set_ylabel("Voltage")
ax_bat_current.set_ylabel("Current")
ax_bat_eff_volt.set_ylabel("Voltage Efficiency")
ax_bat_cycle.set_xlabel("Cycle")

ax_bat_volt.set_xlabel("Time")

ax_bat_volt.grid()

fig_cv.tight_layout()
fig_bat.tight_layout()

fig_agg_cv = draw_figure(canvas_cv, fig_cv)
fig_agg_bat = draw_figure(canvas_bat, fig_bat)

cycle_start = 1
cycle_end = 1
marker_number = 40
while True:
    event, values = window.read()
    match event:
        case sg.WIN_CLOSED | 'exit' | 'exit_2':
            break
        case "About PySimpleCV":
            About_PySimpleCV()
        case 'cv_clear':
            ax_cv.cla()
            fig_agg_cv.draw()
        case "Open CV File":
            CV_file_new = sg.popup_get_file('Choose CV file')
            # If cancel, close the window, go back to beginning
            if CV_file_new is None:
                continue
            elif CV_file_new == '':
                continue
            # try:
            CV_file = CV_file_new
            df_CV = CV_file2df(CV_file)
            cv_size, volt, current = get_CV_init(df_CV) # Only need the cv_size so set to [0]
            window['sl_cut_val'].Update(range=(0,cv_size))
            window['sl_jpa_lns'].Update(range=(0,cv_size))
            window['sl_jpa_lne'].Update(range=(0,cv_size))
            window['sl_jpc_lns'].Update(range=(0,cv_size))
            window['sl_jpc_lne'].Update(range=(0,cv_size))
            window['sl_cut_val'].Update(disabled=False)
            window['sl_jpa_lns'].Update(disabled=False)
            window['sl_jpa_lne'].Update(disabled=False)
            window['sl_jpc_lns'].Update(disabled=False)
            window['sl_jpc_lne'].Update(disabled=False)
            window['CV_file_use'].Update(CV_file)
            ax_cv.grid()
            ax_cv.plot(volt, current, '-')
            ax_cv.grid()
            fig_agg_cv.draw()
            # except Exception as file_error:
            #     sg.popup(file_error, keep_on_top=True)
        case 'sl_cut_val' | 'sl_jpa_lns' | 'sl_jpa_lne' | 'sl_jpc_lns' | 'sl_jpc_lne' :
            cut_val = int(values['sl_cut_val'])  # Getting the k value from the slider element.
            jpa_lns = int(values['sl_jpa_lns'])
            jpa_lne = int(values['sl_jpa_lne'])
            jpc_lns = int(values['sl_jpc_lns'])
            jpc_lne = int(values['sl_jpc_lne'])
            ax_cv.cla()
            ax_cv.grid()
            # Start plotting
            volt, current, jpa_ref_ln, jpa_ref, idx_jpa_max, jpa_abs, jpa_base, jpc_ref_ln, jpc_ref, idx_jpc_min, jpc_abs, jpc_base, jpa_lns, jpa_lne, jpc_lns, jpc_lne, jpa, jpc = get_CV(df_CV,cut_val,jpa_lns,jpa_lne,jpc_lns,jpc_lne)
            ax_cv.plot(volt, current)
            ax_cv.set_xlabel("Voltage")
            ax_cv.set_ylabel("Current")
            ax_cv.plot(volt[jpa_lns:jpa_lne],current[jpa_lns:jpa_lne],linewidth=4,linestyle='-',color='red')
            ax_cv.plot(jpa_ref_ln,jpa_ref,linewidth=2,linestyle='--')
            ax_cv.plot(volt[idx_jpa_max],jpa_abs,'bo')
            ax_cv.plot(volt[idx_jpa_max],jpa_base,'go')
            ax_cv.annotate(text='', xy=(volt[idx_jpa_max],jpa_base), xytext=(volt[idx_jpa_max],jpa_abs), arrowprops=dict(arrowstyle='<-'))
            
            ax_cv.plot(volt[jpc_lns:jpc_lne],current[jpc_lns:jpc_lne],linewidth=4,linestyle='-',color='blue')
            ax_cv.plot(jpc_ref_ln,jpc_ref,linewidth=2,linestyle='--')
            ax_cv.plot(volt[idx_jpc_min],jpc_abs,'bo')
            ax_cv.plot(volt[idx_jpc_min],jpc_base,'go')
            ax_cv.annotate(text='', xy=(volt[idx_jpc_min],jpc_abs), xytext=(volt[idx_jpc_min],jpc_base), arrowprops=dict(arrowstyle='<-'))
            window['output_jpa'].Update(np.round(jpa,3))
            window['output_jpc'].Update(np.round(jpc,3))
            window['output_rev'].Update(np.round(jpa/jpc,3))
            fig_agg_cv.draw()
        case 'cb_volt':
            print(values['cb_volt'])
            sg.popup(values['cb_volt'], keep_on_top=True)
        case 'bat_clear':
            ax_bat_current.cla()
            ax_bat_volt.cla()
            fig_agg_bat.draw()
        case "Open Battery File":
            bat_file_new = sg.popup_get_file('Choose battery cycle file (.xls)')
            # If cancel, close the window, go back to beginning
            # If empty, use old file
            if bat_file_new is None:
                continue
            elif bat_file_new == '':
                continue
            try:
                bat_file = bat_file_new
                df_bat, row_size, time_df, volt_df, current_df, capacity_df, state_df = battery_xls2df(bat_file)
                # Sequence information
                charge_seq, discharge_seq, rest_seq = find_state_seq(state_df)
                tot_cycle_number = np.shape(charge_seq)[0]
                VE_arr, CE_arr, EE_arr = get_battery_eff(row_size, time_df, volt_df, current_df, capacity_df, state_df, 1, tot_cycle_number, charge_seq, discharge_seq)
                
                VE_avg = np.average(VE_arr[0:cycle_end])
                CE_avg = np.average(CE_arr[0:cycle_end])
                EE_avg = np.average(EE_arr[0:cycle_end])
                
                #For display table
                df_display=pd.DataFrame([VE_arr,CE_arr,EE_arr]) # Create dataframe to display in multiline output
                df_display=df_display.T
                df_display.columns = ['Volt', 'Current', 'Energy']
                df_display.index = df_display.index + 1 # Start index at 1 for nice looking

                
                
                window['cycle_end'].Update(disabled=False)
                window['cycle_start'].Update(disabled=False)
                window['cycle_start'].Update(range=(0,tot_cycle_number-1))
                window['cycle_end'].Update(range=(1,tot_cycle_number))
                window['bat_file_use'].Update(bat_file)
                window['output_arr'].Update(df_display.to_string()) # Make sure to print all lines
                window['tot_cycle'].Update(tot_cycle_number)
                window['output_ve'].Update(np.round(VE_avg,3))
                window['output_ce'].Update(np.round(CE_avg,3))
                window['output_ee'].Update(np.round(EE_avg,3))
                
                ax_bat_volt.plot(time_df, volt_df, '-',color='blue')
                ax_bat_current.plot(time_df, current_df, '--',color='red')
                
                # Match cycle scale to time scale and plot efficiency.
                cycle_plot = np.linspace(1,tot_cycle_number, num=tot_cycle_number)
                cycle_idx = (charge_seq)[:,1]
                time_cycle = time_df[cycle_idx]
                ax_bat_eff_volt.plot(time_df[cycle_idx], VE_arr, '*',color='green')
                # Set limit and ticks of bat_cycle
                ax_bat_cycle.set_xticks(cycle_plot)
                ax_bat_cycle.set_xlim(left=0,right=tot_cycle_number)
                
                ax_bat_volt.set_xlim(left=0,right=max(time_df))
                ax_bat_volt.grid()
                fig_agg_bat.draw()
            except Exception as file_error:
                sg.popup(file_error, keep_on_top=True)
        case 'cycle_start' | 'cycle_end':
            cycle_start = int(values['cycle_start'])
            
            if cycle_start > cycle_end - 1:
                cycle_end = cycle_start + 1
                window['cycle_end'].Update(cycle_end)
                
            cycle_end = int(values['cycle_end'])
            if cycle_end < cycle_start + 1:
                cycle_start = cycle_end -1
                window['cycle_start'].Update(cycle_start)
                
            ax_bat_volt.cla()
            ax_bat_volt.grid()
            # Start plotting

            cycle_idx_range = cy_idx_state_range(state_df, cycle_start, cycle_end, charge_seq, discharge_seq)
            
            VE_avg = np.average(VE_arr[cycle_start:cycle_end])
            CE_avg = np.average(CE_arr[cycle_start:cycle_end])
            EE_avg = np.average(EE_arr[cycle_start:cycle_end])
            
            ax_bat_volt.plot(time_df, volt_df, '-', color='blue')
            left_bound = time_df[cycle_idx_range][0]
            right_bound = time_df[cycle_idx_range][1]
            ax_bat_volt.set_xlim(left=left_bound,right=right_bound)
            
            ax_bat_cycle.set_xticks(cycle_plot)
            ax_bat_cycle.set_xlim(left=cycle_start,right=cycle_end)
            
            ax_bat_volt.set_xlabel("Time")
            ax_bat_volt.set_ylabel("Voltage")
    
            ax_bat_current.cla()
            ax_bat_current.plot(time_df, current_df,'--',color='red')
            ax_bat_current.set_ylabel("Current")
            
            window['output_ve'].Update(np.round(VE_avg,3))
            window['output_ce'].Update(np.round(CE_avg,3))
            window['output_ee'].Update(np.round(EE_avg,3))
            fig_agg_bat.draw()
window.close()
