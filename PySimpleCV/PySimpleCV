#!/usr/bin/python3
import numpy as np 
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg 
from matplotlib.figure import Figure
import PySimpleGUI as sg
import matplotlib 
from matplotlib.lines import Line2D
import pandas as pd

matplotlib.use('TkAgg')
from PySimpleCV_main_func import get_CV, battery_xls2df, get_CV_init, find_state_seq, get_battery_eff, cy_idx_state_range, CV_file2df, get_CV_peak

def draw_figure(canvas, figure): 
    figure_canvas_agg = FigureCanvasTkAgg(figure, canvas) 
    figure_canvas_agg.draw() 
    figure_canvas_agg.get_tk_widget().pack(side='top', fill='both', expand=1) 
    return figure_canvas_agg

def About_PySimpleCV():
    [sg.popup('PySimpleCV written by Kavin Teenakul',
    'License: GPL v3',
    'https://github.com/kevinsmia1939/PySimpleCV',
    'Libraries used: Numpy, Pandas, Matplotlib, PySimpleGUI')]
    
sg.theme('DarkBlue')

# Generate layout for CV tab
cv_layout = [
    [sg.Canvas(key='-CANVAS_cv-')],
    [sg.Button("Open CV File"),sg.Text('.csv file with voltage on 1st colume and current on 2nd column separated by comma')],
    [sg.Text('CV file:'), sg.Text('No CV file selected', key = 'CV_file_use')],
    [sg.Text('jpa='), sg.Text('', key = 'output_jpa'), sg.Text('jpc='), sg.Text('', key = 'output_jpc'), sg.Text('Reversibility (jpa/jpc)='), sg.Text('', key = 'output_rev')],
    [sg.Text('Trim CV plot'), sg.Slider(range=(1, 1), size=(95, 10), orientation='h', key='sl_cut_val', enable_events=True, disabled=True)],
    [sg.Text('Start 1'),sg.Slider(range=(1, 1), size=(95, 10), orientation='h', key='sl_jpa_lns', enable_events=True, disabled=True)],
    [sg.Text('End 1'),sg.Slider(range=(1, 1), size=(95, 10), orientation='h', key='sl_jpa_lne', enable_events=True, disabled=True)],
    [sg.Text('Start 2'),sg.Slider(range=(1, 1), size=(95, 10), orientation='h', key='sl_jpc_lns', enable_events=True, disabled=True)],
    [sg.Text('End 2'),sg.Slider(range=(1, 1), size=(95, 10), orientation='h', key='sl_jpc_lne', enable_events=True, disabled=True)],
    
    [sg.Text('Peak search range'),sg.Slider(range=(1, 100), size=(95, 10), orientation='h', key='peak_range', enable_events=True, disabled=False)],
    [sg.Text('Top peak position'),sg.Slider(range=(1, 1), size=(95, 10), orientation='h', key='peak_pos', enable_events=True, disabled=False)],
    [sg.Text('Bottom peak position'),sg.Slider(range=(1, 1), size=(95, 10), orientation='h', key='trough_pos', enable_events=True, disabled=False)],
    
    [sg.Button('Clear plot', key='cv_clear'),sg.Button('Exit', key='exit'),sg.Button('Save plot', key='save_cv'),sg.Button('About PySimpleCV')]
]
# Generate layout for battery cycling tab.
bat_layout = [
    [sg.Canvas(key='-CANVAS_bat-')],
    [sg.Button("Open Battery File"),sg.Text('.xls files'),
     sg.Checkbox('Voltage', default=True, key='cb_volt', disabled=True, enable_events=True), 
     sg.Checkbox('Current', default=True, key='cb_current', disabled=True, enable_events=True),
     sg.Checkbox('Efficiencies', default=True, key='cb_eff', disabled=True, enable_events=True)],
    [sg.Text('Battery file:'), sg.Text('No Battery file selected', key = 'bat_file_use')],
    [sg.Text('Average voltage efficiency='),sg.Text('', key = 'output_ve'),sg.Text('%'),
     sg.Text('Average current efficiency='), sg.Text('', key = 'output_ce'),sg.Text('%'),
     sg.Text('Average energy efficiency='), sg.Text('', key = 'output_ee'),sg.Text('%'),
     sg.Text('Total number of cycles='), sg.Text('', key= 'tot_cycle')],
    [sg.Text('Voltage, current, energy efficiency(%) for each row of cycle, press ctrl+c to copy')],
    [sg.Text('To copy nicely to spreadsheet software, select space as delimiter and merge delimters.')],
    [sg.Multiline('',size=(50,5), disabled=True, key = 'output_arr')],
    [sg.Text('Cycle start'), sg.Slider(range=(0, 0), size=(95, 20), orientation='h', key='cycle_start', enable_events=True, disabled=False)],
    [sg.Text('Cycle end'), sg.Slider(range=(1, 1), size=(95, 20), orientation='h', key='cycle_end', enable_events=True, disabled=False)],
    [sg.Button('Clear plot',key='bat_clear'),sg.Button('Save plot', key='save_bat'), sg.Button('Exit', key='exit_2')]
    ]

layout =[[sg.TabGroup([[  sg.Tab('Cyclic Voltammetry', cv_layout),
                           sg.Tab('Battery Cycling', bat_layout)
                           ]], key='-TAB GROUP-', expand_x=True, expand_y=True),
]]
          
window = sg.Window('PySimpleCV', layout, finalize=True, element_justification='center')
# window.maximize()
canvas_cv = window['-CANVAS_cv-'].tk_canvas
canvas_bat = window['-CANVAS_bat-'].tk_canvas

# Generate initial empty plot.
fig_cv = Figure(figsize=(10,5))
ax_cv = fig_cv.add_subplot(111)
ax_cv.set_xlabel("Voltage")
ax_cv.set_ylabel("Current")
ax_cv.grid()
# tight layout push away y label
# fig_cv.tight_layout(pad=2)
fig_agg_cv = draw_figure(canvas_cv, fig_cv)

fig_bat = Figure(figsize=(10,5))
ax_bat_volt = fig_bat.add_subplot(111)
ax_bat_current = ax_bat_volt.twinx()
ax_bat_eff = ax_bat_volt.twinx()
ax_bat_cycle = ax_bat_volt.twiny()
ax_bat_eff.spines.right.set_position(("axes", 1.1))
ax_bat_volt.set_ylabel("Voltage")
ax_bat_current.set_ylabel("Current")
ax_bat_eff.set_ylabel("Voltage/Current/Energy Efficiencies")
ax_bat_cycle.set_xlabel("Cycle")
ax_bat_volt.set_xlabel("Time")
# Create manual legend so we can put them in the same box
volt_leg = Line2D([0], [0], label='Voltage', color='blue', linestyle='-')
current_leg = Line2D([0], [0], label='Current', color='red', linestyle='--')
VE_leg = Line2D([0], [0], label='VE', color='blue', marker='*', linestyle='None')
CE_leg = Line2D([0], [0], label='CE', color='red', marker='.', linestyle='None')
EE_leg = Line2D([0], [0], label='EE', color='green', marker='^', linestyle='None')
ax_bat_volt.legend(handles=[volt_leg,current_leg,VE_leg,CE_leg,EE_leg],ncol=5, bbox_to_anchor=(0.5,-0.25),loc='lower center')
ax_bat_volt.grid()
fig_bat.tight_layout()
fig_agg_bat = draw_figure(canvas_bat, fig_bat)


cycle_start = 1
cycle_end = 1

def clear_battery_plot():
    # function to clear the plot.
    # Reset scrolls and checkboxes
    window['cb_volt'].Update(False)
    window['cb_current'].Update(False)
    window['cb_eff'].Update(False)
    window['cb_volt'].Update(disabled=True)
    window['cb_current'].Update(disabled=True)
    window['cb_eff'].Update(disabled=True)
    window['cycle_start'].Update(range=(0,0))
    window['cycle_end'].Update(range=(1,1))
    window['cycle_start'].Update(disabled=True)
    window['cycle_end'].Update(disabled=True)    
    # Remove existing plot.
    ax_bat_current.cla()
    ax_bat_volt.cla()
    ax_bat_eff.cla()
    ax_bat_cycle.cla()
    
    #Redraw Efficiency axis and labels.
    ax_bat_eff.spines.right.set_position(("axes", 1.1))
    ax_bat_volt.set_ylabel("Voltage")
    ax_bat_current.set_ylabel("Current")
    ax_bat_eff.set_ylabel("Voltage/Current/Energy Efficiencies")
    ax_bat_cycle.set_xlabel("Cycle")
    ax_bat_volt.set_xlabel("Time")
    # Create manual legend so we can put them in the same box
    volt_leg = Line2D([0], [0], label='Voltage', color='blue', linestyle='-')
    current_leg = Line2D([0], [0], label='Current', color='red', linestyle='--')
    VE_leg = Line2D([0], [0], label='VE', color='blue', marker='*', linestyle='None')
    CE_leg = Line2D([0], [0], label='CE', color='red', marker='.', linestyle='None')
    EE_leg = Line2D([0], [0], label='EE', color='green', marker='^', linestyle='None')
    ax_bat_volt.legend(handles=[volt_leg,current_leg,VE_leg,CE_leg,EE_leg],ncol=5, bbox_to_anchor=(0.5,-0.25),loc='lower center')
    ax_bat_volt.grid()
    fig_agg_bat.draw()
    
def clear_cv_plot():
    # function to clear the plot.
    # Reset scrolls and checkboxes
    window['sl_cut_val'].Update(disabled=True)
    window['sl_jpa_lns'].Update(disabled=True)
    window['sl_jpa_lne'].Update(disabled=True)
    window['sl_jpc_lns'].Update(disabled=True)
    window['sl_jpc_lne'].Update(disabled=True)
    window['sl_cut_val'].Update(range=(1, 1))
    window['sl_jpa_lns'].Update(range=(1, 1))
    window['sl_jpa_lne'].Update(range=(1, 1))
    window['sl_jpc_lns'].Update(range=(1, 1))
    window['sl_jpc_lne'].Update(range=(1, 1))
    ax_cv.cla()
    ax_cv.grid()
    ax_cv.set_xlabel("Voltage")
    ax_cv.set_ylabel("Current")
    fig_agg_cv.draw()

while True:
    event, values = window.read()
    match event:
        case sg.WIN_CLOSED | 'exit' | 'exit_2':
            break
        case "About PySimpleCV":
            About_PySimpleCV()
        case 'cv_clear':
            clear_cv_plot()
        case "Open CV File":
            CV_file_new = sg.popup_get_file('Choose CV file')
            # If cancel, close the window, go back to beginning
            if CV_file_new is None:
                continue
            elif CV_file_new == '':
                continue
            try:
                # Clear plot every time new plot open
                clear_cv_plot()
                CV_file = CV_file_new
                df_CV = CV_file2df(CV_file)
                cv_size, volt, current = get_CV_init(df_CV) # Only need the cv_size so set to [0]
                window['sl_cut_val'].Update(range=(0,cv_size))
                window['sl_jpa_lns'].Update(range=(0,cv_size))
                window['sl_jpa_lne'].Update(range=(0,cv_size))
                window['sl_jpc_lns'].Update(range=(0,cv_size))
                window['sl_jpc_lne'].Update(range=(0,cv_size))
                window['sl_cut_val'].Update(disabled=False)
                window['sl_jpa_lns'].Update(disabled=False)
                window['sl_jpa_lne'].Update(disabled=False)
                window['sl_jpc_lns'].Update(disabled=False)
                window['sl_jpc_lne'].Update(disabled=False)
                window['CV_file_use'].Update(CV_file)
                ax_cv.grid()
                ax_cv.plot(volt, current, '-', color='black')
                ax_cv.grid()
                fig_agg_cv.draw()
            except Exception as file_error:
                sg.popup(file_error, keep_on_top=True)
        case 'sl_cut_val' | 'sl_jpa_lns' | 'sl_jpa_lne' | 'sl_jpc_lns' | 'sl_jpc_lne' | 'peak_pos'| 'trough_pos'| 'peak_range' :
            cut_val = int(values['sl_cut_val'])  # Getting the k value from the slider element.
            jpa_lns = int(values['sl_jpa_lns'])
            jpa_lne = int(values['sl_jpa_lne'])
            jpc_lns = int(values['sl_jpc_lns'])
            jpc_lne = int(values['sl_jpc_lne'])
            ax_cv.cla()
            ax_cv.grid()
            
            #Find custom peak
            window['peak_pos'].Update(range=(0,cv_size))
            window['trough_pos'].Update(range=(0,cv_size))
            peak_pos = int(values['peak_pos'])
            trough_pos = int(values['trough_pos'])
            peak_range = int(values['peak_range'])
            low_range_peak, high_range_peak, peak_volt, peak_curr, low_range_trough, high_range_trough, trough_volt, trough_curr = get_CV_peak(df_CV, peak_range, peak_pos, trough_pos)

            ax_cv.plot((volt[low_range_peak],volt[high_range_peak]),(current[low_range_peak],current[high_range_peak]),"|", markersize = 10)
            ax_cv.plot(peak_volt,peak_curr,"x", markersize = 10)
            
            ax_cv.plot((volt[low_range_trough],volt[high_range_trough]),(current[low_range_trough],current[high_range_trough]),"|", markersize = 10)
            ax_cv.plot(trough_volt,trough_curr,"x", markersize = 10)

            
            # Start plotting
            jpa_lns,jpa_lne,jpc_lns,jpc_lne, volt, current, jpa_base, jpc_base = get_CV(df_CV,jpa_lns,jpa_lne,jpc_lns,jpc_lne,peak_volt,trough_volt)
            ax_cv.plot(volt[cut_val:], current[cut_val:], '-', color='black')
            
            ax_cv.plot(peak_volt,jpa_base,marker='s')
            ax_cv.plot(volt[jpa_lns:jpa_lne],current[jpa_lns:jpa_lne],linewidth=4,linestyle='-',color='red')
            ax_cv.annotate(text='', xy=(peak_volt,jpa_base), xytext=(peak_volt,peak_curr), arrowprops=dict(arrowstyle='<-'))
            ax_cv.plot((volt[jpa_lns],peak_volt),(current[jpa_lns],jpa_base),'--')
            

            ax_cv.plot(volt[jpc_lns:jpc_lne],current[jpc_lns:jpc_lne],linewidth=4,linestyle='-',color='blue')
            ax_cv.plot(trough_volt,jpc_base,marker='s')
            ax_cv.annotate(text='', xy=(trough_volt,jpc_base), xytext=(trough_volt,trough_curr), arrowprops=dict(arrowstyle='<-'))
            ax_cv.plot((volt[jpc_lns],trough_volt),(current[jpc_lns],jpc_base),'--')

            fig_agg_cv.draw()
            jpa = peak_curr - jpa_base
            jpc = jpc_base - trough_curr
            window['output_jpa'].Update(np.round(jpa,3))
            window['output_jpc'].Update(np.round(jpc,3))
            window['output_rev'].Update(np.round((jpa/jpc),3))
        case "save_cv":
            save_cv_loc = sg.popup_get_file('Create of choose a file (PNG) to save to', save_as=True)
            if save_cv_loc is None:
                continue
            elif save_cv_loc == '':
                continue
            fig_cv.savefig(save_cv_loc)
        case "Open Battery File":
            bat_file_new = sg.popup_get_file('Choose battery cycle file (.xls)')
            # If cancel, close the window, go back to beginning
            # If empty, use old file
            if bat_file_new is None:
                continue
            elif bat_file_new == '':
                continue
            try:
                clear_battery_plot()
                bat_file = bat_file_new
                df_bat, row_size, time_df, volt_df, current_df, capacity_df, state_df = battery_xls2df(bat_file)
                # Sequence information
                charge_seq, discharge_seq, rest_seq = find_state_seq(state_df)
                tot_cycle_number = np.shape(charge_seq)[0]
                VE_arr, CE_arr, EE_arr = get_battery_eff(row_size, time_df, volt_df, current_df, capacity_df, state_df, 1, tot_cycle_number, charge_seq, discharge_seq)
                
                VE_avg = np.average(VE_arr[0:cycle_end])
                CE_avg = np.average(CE_arr[0:cycle_end])
                EE_avg = np.average(EE_arr[0:cycle_end])
                
                #For display table
                df_display=pd.DataFrame([VE_arr,CE_arr,EE_arr]) # Create dataframe to display in multiline output
                df_display=df_display.T
                df_display.columns = ['Volt', 'Current', 'Energy']
                df_display.index = df_display.index + 1 # Start index at 1 for nice looking

                window['cycle_end'].Update(disabled=False)
                window['cycle_start'].Update(disabled=False)
                window['cb_volt'].Update(disabled=False)
                window['cb_current'].Update(disabled=False)
                window['cb_eff'].Update(disabled=False)
                window['cb_volt'].Update(True)
                window['cb_current'].Update(True)
                window['cb_eff'].Update(True)
                window['cycle_start'].Update(range=(0,tot_cycle_number-1))
                window['cycle_end'].Update(range=(1,tot_cycle_number))
                window['bat_file_use'].Update(bat_file)
                window['output_arr'].Update(df_display.to_string()) # Make sure to print all lines
                window['tot_cycle'].Update(tot_cycle_number)
                window['output_ve'].Update(np.round(VE_avg,3))
                window['output_ce'].Update(np.round(CE_avg,3))
                window['output_ee'].Update(np.round(EE_avg,3))
                
                volt_line, = ax_bat_volt.plot(time_df, volt_df, '-', label='Voltage', color='blue')
                current_line, = ax_bat_current.plot(time_df, current_df, '--', label='Current', color='red')
                
                # Match cycle scale to time scale and plot efficiency.
                cycle_plot = np.linspace(1,tot_cycle_number, num=tot_cycle_number)
                cycle_idx = (charge_seq)[:,1]
                time_cycle = time_df[cycle_idx]
                VE_marker, = ax_bat_eff.plot(time_df[cycle_idx], VE_arr, '*',color='blue',label='VE', markersize=8)
                CE_marker, = ax_bat_eff.plot(time_df[cycle_idx], CE_arr, '.',color='red',label='CE', markersize=8)
                EE_marker, = ax_bat_eff.plot(time_df[cycle_idx], EE_arr, '^',color='green',label='EE', markersize=4)
                
                ax_bat_volt.autoscale()
                ax_bat_current.autoscale()
                ax_bat_eff.autoscale()
                # Set limit and ticks of bat_cycle
                ax_bat_cycle.set_xticks(cycle_plot)
                ax_bat_cycle.set_xlim(left=0,right=tot_cycle_number)
                
                # Set limit for efficiencies
                ax_bat_eff.set_ylim(0,100)
                
                ax_bat_volt.set_xlim(left=0,right=max(time_df))

                ax_bat_volt.grid()

                fig_agg_bat.draw()
            except Exception as file_error:
                sg.popup(file_error, keep_on_top=True)
        case 'cb_eff':
            if values['cb_eff'] == False:
                VE_marker.remove()
                CE_marker.remove()
                EE_marker.remove()
            else:
                VE_marker, = ax_bat_eff.plot(time_df[cycle_idx], VE_arr, '*',color='blue',label='VE', markersize=8)
                CE_marker, = ax_bat_eff.plot(time_df[cycle_idx], CE_arr, '.',color='red',label='CE', markersize=8)
                EE_marker, = ax_bat_eff.plot(time_df[cycle_idx], EE_arr, '^',color='green',label='EE', markersize=4)
            fig_agg_bat.draw()
        case 'cb_volt':
            if values['cb_volt'] == False:
                volt_line.remove()
            else:
                volt_line, = ax_bat_volt.plot(time_df, volt_df, '-', label='Voltage', color='blue')
            fig_agg_bat.draw()
        case 'cb_current':
            if values['cb_current'] == False:
                current_line.remove()
            else:
                current_line, = ax_bat_current.plot(time_df, current_df, '--', label='Current', color='red')
            fig_agg_bat.draw()
        case 'cycle_start' | 'cycle_end':
            cycle_start = int(values['cycle_start'])
            
            if cycle_start > cycle_end - 1:
                cycle_end = cycle_start + 1
                window['cycle_end'].Update(cycle_end)
                
            cycle_end = int(values['cycle_end'])
            if cycle_end < cycle_start + 1:
                cycle_start = cycle_end - 1
                window['cycle_start'].Update(cycle_start)
                
            # Do not replot, since we only change xlim.
            cycle_idx_range = cy_idx_state_range(state_df, cycle_start, cycle_end, charge_seq, discharge_seq)
            left_bound = time_df[cycle_idx_range][0]
            right_bound = time_df[cycle_idx_range][1]
            ax_bat_volt.set_xlim(left=left_bound,right=right_bound)
            ax_bat_cycle.set_xlim(left=cycle_start,right=cycle_end)
            ax_bat_volt.grid()
            
            VE_avg = np.average(VE_arr[cycle_start:cycle_end])
            CE_avg = np.average(CE_arr[cycle_start:cycle_end])
            EE_avg = np.average(EE_arr[cycle_start:cycle_end])
            window['output_ve'].Update(np.round(VE_avg,3))
            window['output_ce'].Update(np.round(CE_avg,3))
            window['output_ee'].Update(np.round(EE_avg,3))
            fig_agg_bat.draw()
        case 'bat_clear':
            clear_battery_plot()
        case "save_bat":
            save_bat_loc = sg.popup_get_file('Create of choose a file (PNG) to save to', save_as=True)
            if save_bat_loc is None:
                continue
            elif save_bat_loc == '':
                continue
            fig_cv.savefig(save_bat_loc)
window.close()
